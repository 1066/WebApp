import React, { Component, PropTypes } from "react";

import { $ajax } from "../../utils/service";
import LoadingWheel from "../../components/LoadingWheel";

const ADDED = "ADDED";

import Office from "../../components/Ballot/Office";
import OfficeStore from "../../stores/OfficeStore";
import OfficeActions from "../../actions/OfficeActions";

import Measure from "../../components/Ballot/Measure";
import MeasureStore from "../../stores/MeasureStore";
import MeasureActions from "../../actions/MeasureActions";

import Star from "../../components/Star";

const TYPES = {
  OFFICE: {
    jsx: Office,
    addItemById: OfficeActions.addItemById.bind(OfficeActions)
  },
  MEASURE: {
    jsx: Measure,
    addItemById: MeasureActions.addItemById.bind(MeasureActions)
  }
};

export default class Ballot extends Component {
  static propTypes = {
    history: PropTypes.object,
    children: PropTypes.object
  };

  constructor (props) {
    super(props);

    this.state = {
      ballot: [],
      loading: true,
      error: false
    };

  }

  concatenateBallotItem (item) {
    const ballot = this.state.ballot.splice().concat([item]);
    this.setState({ ballot, loading: false, error: false });
  }

  componentDidMount () {
    OfficeStore.addListener(ADDED, this.concatenateBallotItem.bind(this));
    MeasureStore.addChangeListener(this.concatenateBallotItem.bind(this));

    $ajax({
      endpoint: "voterBallotItemsRetrieve",
      success: (res) =>
        this.populateStores(res.ballot_item_list),

      error: (err) => console.log(err) || // log always returns undefined, then set state
        this.addItem({ error: true, loading: false})

    });
  }

  populateStores (ballotItems) {

    ballotItems.forEach( (item) => {
      const { we_vote_id: id, kind_of_ballot_item: type } = item;

      try {
        TYPES[type].addItemById(id, item);
      } catch (e) {
        console.error("Error:", e.message);
      }

    });
  }

  componentWillUnmount () {
    OfficeStore.removeListener(ADDED, this.concatenateBallotItem.bind(this));
    MeasureStore.removeChangeListener(this.concatenateBallotItem.bind(this));
  }

  render () {
    var { loading } = this.state;

    return loading ? LoadingWheel :
      <div className="ballot">
        { this.renderBallot() }
      </div>;

  }

  renderBallot () {
    if (this.state.error)
      return <span> Error loading your ballot </span>;

    const ballot = this.state.ballot.map( (item) => {

      const {
        we_vote_id: id,
        kind_of_ballot_item: type,
        ballot_item_display_name: displayName,
        candidate_list: candidates = null
      } = item;

      const Type = TYPES[type].jsx; // Measure or Office, fallback to office

      const props = {
        key: id,
        _raw: item
      };

      if (candidates) props.candidates = candidates;

      const Item =
        <Type {...props} >
          <div className="display-name">
            {displayName}
          </div>

          <Star key={id} type={type} />

        </Type>;

      return Item;

    });

    return ballot;
  }
}
